import aiohttp, ssl, json
import asyncio
import logging
import re
import tempfile
import redis.asyncio as redis
from pathlib import Path
from typing import Dict, Tuple, Optional, List
import subprocess, pathlib, threading, random

import yt_dlp
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart
from aiogram.types import (
    InlineKeyboardButton,
    Message,
    CallbackQuery,
    FSInputFile,
    BufferedInputFile,
    ReplyKeyboardMarkup,
    KeyboardButton,
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.client.telegram import TelegramAPIServer

# –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —Å—Ç—Ä–∏–º–µ—Ä
# from pythonProject2.streamer import enqueue_stream

# ----------------------------------------------------------------------
# CONFIG
# ----------------------------------------------------------------------
TOKEN = "7459959678:AAEpyKF35x2ivY-e1UtFcybIGyO1H6fD4sE"
LOCAL_API = TelegramAPIServer.from_base("http://127.0.0.1:8081")
session = AiohttpSession(api=LOCAL_API)

YOUTUBE_URL_RE = re.compile(
    r"https?://(?:www\.)?(?:youtube\.com/watch\?v=|youtu\.be/)([\w-]{11})"
)

# Simple in-memory storage: (chat_id, message_id) -> {url, best}
CONTEXT: Dict[Tuple[int, int], Dict] = {}

REDIS_URL = "redis://localhost:6379/0"
QUEUE_KEY = "dl:queue"
MAX_WORKERS = 8
redis_pool = redis.from_url(REDIS_URL, encoding="utf-8", decode_responses=True)
sem = asyncio.Semaphore(MAX_WORKERS)

TIMEOUT = aiohttp.ClientTimeout(total=1800, sock_read=1800)  # 30 –º–∏–Ω –Ω–∞ upload
UA_HEADER = {"User-Agent": "curl/7.87.0"}  # Cloudflare friendly
FILE_IO_LIMIT_MB = 1950  # –ª–∏–º–∏—Ç —Ä–∞–∑–º–µ—Ä–∞ –¥–ª—è –ø—Ä—è–º–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –¢–ì

bot = Bot(token=TOKEN, session=session, timeout=TIMEOUT)
router = Dispatcher()

ssl_ctx = ssl.create_default_context()


# ----------------------------------------------------------------------
# –†–∞–∑–Ω–æ–µ
# ----------------------------------------------------------------------
FALLBACK_SERVERS: List[str] = [
    "store1",
    "store2",
    "store3",
    "store4",
    "store5",
    "store6",
    "store7",
    "store9",
    "srv-store8",
    "srv-store10",
]

REPLY_KB = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üîç"), KeyboardButton(text="‚ùì")]],
    resize_keyboard=True,
    one_time_keyboard=False,
    input_field_placeholder="üîó –í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É —Å—é–¥–∞",
)

@router.message(lambda m: m.text and "üîç" in m.text.lower())
async def cmd_search(msg: Message):
    await msg.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ *youtube* –∏–ª–∏ *rutube*", reply_markup=REPLY_KB, parse_mode="MarkdownV2")


@router.message(lambda m: m.text and "‚ùì" in m.text.lower())
async def cmd_help(msg: Message):
    await msg.answer("–≠—Ç–æ –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ —Å *youtube* –∏–ª–∏ *rutube* \n\n–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ üé•",
                     reply_markup=REPLY_KB, parse_mode="MarkdownV2")

async def _safe_json(resp: aiohttp.ClientResponse) -> Optional[dict]:
    try:
        return json.loads(await resp.text())
    except json.JSONDecodeError:
        return None

# ----------------------------------------------------------------------
# yt-dlp helpers
# ----------------------------------------------------------------------
def _calc_size(fmt: dict, duration: int) -> int:
    """Approximate size in bytes (‚àû –µ—Å–ª–∏ –Ω–µ–ª—å–∑—è –æ—Ü–µ–Ω–∏—Ç—å)."""
    if fmt.get("filesize"):
        return fmt["filesize"]
    if fmt.get("filesize_approx"):
        return fmt["filesize_approx"]
    bitrate = fmt.get("tbr") or fmt.get("abr") or 0  # kbit/s
    if bitrate and duration:
        return int(bitrate * 125 * duration)
    return float("inf")


# 1. –û–¥–∏–Ω-–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä YoutubeDL –Ω–∞ –≤—Å—ë –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
_YDL_LOCK = threading.Lock()
_YDL: yt_dlp.YoutubeDL | None = None


def _get_ytdl() -> yt_dlp.YoutubeDL:
    global _YDL
    with _YDL_LOCK:
        if _YDL is None:
            _YDL = yt_dlp.YoutubeDL(
                {
                    "skip_download": True,
                    "quiet": True,
                    "no_warnings": True,
                    # –ø–æ–Ω–∏–º–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ MP4-–≤–∏–¥–µ–æ + –ª—É—á—à—É—é M4A-–¥–æ—Ä–æ–∂–∫—É
                    "format": (
                        "bv*[vcodec^=avc1][ext=mp4]+ba[ext=m4a]/best[ext=mp4][vcodec^=avc1]"
                    ),
                    "extractor_args": {
                        "youtube": ["skip=dash,hls", "player_client=android"]
                    },
                    "forcejson": True,
                    "simulate": True,
                }
            )
        return _YDL


def _best_formats(url: str):
    """–°–æ–±–∏—Ä–∞–µ—Ç –ª—É—á—à–∏–µ –≤–∏–¥–µ–æ-–≤–∞—Ä–∏–∞–Ω—Ç—ã + –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∞—É–¥–∏–æ."""
    ydl = _get_ytdl()
    info = ydl.extract_info(url, download=False)

    duration = info.get("duration", 0) or 0
    best: Dict = {}

    # ‚ë† –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π m4a-–ø–æ—Ç–æ–∫
    audio_fmt = None
    audio_size = float("inf")
    for fmt in info["formats"]:
        if fmt.get("vcodec") == "none" and fmt.get("ext") == "m4a":
            size = _calc_size(fmt, duration)
            if size < audio_size:
                audio_fmt, audio_size = fmt, size

    if audio_fmt:
        best["aud"] = {"selector": audio_fmt["format_id"], "size": audio_size}

    # ‚ë° –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ MP4/H.264-–≤–∏–¥–µ–æ-–ø–æ—Ç–æ–∫–∏
    for fmt in info["formats"]:
        if fmt.get("ext") != "mp4":
            continue
        vcodec = fmt.get("vcodec") or ""
        if not vcodec.startswith("avc") or vcodec == "none":
            continue

        h = fmt.get("height") or 0
        if not h:
            continue

        size = _calc_size(fmt, duration)
        selector = fmt["format_id"]

        # –µ—Å–ª–∏ DASH-–≤–∏–¥–µ–æ –±–µ–∑ –∑–≤—É–∫–∞, –ø—Ä–∏–±–∞–≤–ª—è–µ–º –≤–µ—Å –∞—É–¥–∏–æ
        if fmt.get("acodec") == "none" and audio_fmt:
            size += audio_size
            selector += f"+{audio_fmt['format_id']}"

        if h not in best or size < best[h]["size"]:
            best[h] = {"selector": selector, "size": size}

    return best, duration


async def get_best_formats(url: str):
    loop = asyncio.get_running_loop()
    return await loop.run_in_executor(None, _best_formats, url)

async def _download_video(url: str, selector: str, tmp_dir: Path) -> Path:
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç DASH-–≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ aria2c, –∑–∞—Ç–µ–º remux-–∏—Ç –≤ MP4.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç Path –∫ –≥–æ—Ç–æ–≤–æ–º—É —Ñ–∞–π–ª—É.
    """
    def _dl() -> Path:
        ydl_opts = {
            # 1. –∫–∞–∫–æ–π –ø–æ—Ç–æ–∫ –≤—ã—Ç—è–≥–∏–≤–∞—Ç—å
            "format": selector,                      # –Ω–∞–ø—Ä–∏–º–µ—Ä "137+140"
            "outtmpl": str(tmp_dir / "%(_id)s_%(height)sp.%(ext)s"),

            # 2. –í–Ω–µ—à–Ω–∏–π –∑–∞–≥—Ä—É–∑—á–∏–∫
            "external_downloader": "aria2c",
            "external_downloader_args": [
                # 16 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π, –∫—É—Å–æ–∫ 2 –ú–ë
                "-x16", "-k2M",
                # –¥–æ–∫–∞—á–∫–∞, —Ç–∞–π–º–∞—É—Ç—ã
                "--continue=true", "--retry-wait=3",
            ],

            # 3. –ü–æ—Å—Ç-–ø—Ä–æ—Ü–µ—Å—Å —Ç–æ–ª—å–∫–æ REMUX (–±—ã—Å—Ç—Ä–æ!)
            "postprocessors": [
                {"key": "FFmpegVideoRemuxer", "preferedformat": "mp4"},
            ],

            # 4. –¢–∏—Ö–∏–π —Ä–µ–∂–∏–º
            "quiet": True,
            "no_warnings": True,
        }

        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            return Path(ydl.prepare_filename(info)).with_suffix(".mp4")

    loop = asyncio.get_running_loop()
    return await loop.run_in_executor(None, _dl)


async def _download_video_convert(url: str, selector: str, tmp_dir: Path) -> Path:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –æ–¥–Ω–æ –≤–∏–¥–µ–æ (mp4) –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ."""
    def _dl():
        ydl_opts = {
            "format": selector,
            "outtmpl": str(tmp_dir / "%(_id)s_%(height)sp.mp4"),
            "merge_output_format": "mp4",
            "postprocessors": [
                {"key": "FFmpegVideoConvertor", "preferedformat": "mp4"},
            ],
        }
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            return Path(ydl.prepare_filename(info))

    loop = asyncio.get_running_loop()
    return await loop.run_in_executor(None, _dl)


async def _download_audio(url: str, selector: str, tmp_dir: Path) -> Path:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –æ–¥–Ω–æ –∞—É–¥–∏–æ (m4a) –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ."""
    def _dl():
        ydl_opts = {
            "format": selector,  # –∑–∞—á–∞—Å—Ç—É—é ¬´140¬ª
            "outtmpl": str(tmp_dir / "%(_id)s.m4a"),
            "merge_output_format": "m4a",
            "postprocessors": [
                {
                    "key": "FFmpegExtractAudio",
                    "preferredcodec": "m4a",
                    "preferredquality": "0",
                }
            ],
        }
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            return Path(ydl.prepare_filename(info))

    loop = asyncio.get_running_loop()
    return await loop.run_in_executor(None, _dl)


def get_wh(path: pathlib.Path) -> tuple[int, int]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (width, height) –ø–µ—Ä–≤–æ–π –≤–∏–¥–µ–æ–¥–æ—Ä–æ–∂–∫–∏."""
    meta = subprocess.check_output(
        [
            "ffprobe",
            "-v",
            "quiet",
            "-print_format",
            "json",
            "-select_streams",
            "v:0",
            "-show_entries",
            "stream=width,height",
            str(path),
        ]
    )
    w, h = json.loads(meta)["streams"][0].values()
    return int(w), int(h)


# ----------------------------------------------------------------------
# Bot handlers
# ----------------------------------------------------------------------
@router.message(CommandStart())
async def cmd_start(msg: Message):
    await msg.answer("–ü—Ä–∏–≤–µ—Ç! üôÉ –ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube-–≤–∏–¥–µ–æ", reply_markup=REPLY_KB)


async def _oembed_thumb(video_id: str, ses: aiohttp.ClientSession) -> bytes | None:
    """–ë–µ—Ä—ë–º thumbnail_url –∏–∑ oEmbed, –µ—Å–ª–∏ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ jpg –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."""
    api = f"https://www.youtube.com/oembed?url=https://youtu.be/{video_id}&format=json"
    async with ses.get(api) as r:
        if r.status != 200:
            return None
        thumb_url = (await r.json(content_type=None)).get("thumbnail_url")
    async with ses.get(thumb_url) as r:
        if r.status == 200 and r.headers.get("Content-Type", "").startswith("image/"):
            return await r.read()
    return None


_VARIANTS = ["maxresdefault.jpg", "hqdefault.jpg", "mqdefault.jpg", "sddefault.jpg"]


async def best_youtube_thumb(video_id: str):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–æ–±—ä–µ–∫—Ç/URL, is_url:boolean)."""
    async with aiohttp.ClientSession(
        connector=aiohttp.TCPConnector(ssl=ssl_ctx), timeout=TIMEOUT
    ) as ses:
        # 1Ô∏è‚É£ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ jpg
        for suffix in _VARIANTS:
            url = f"https://img.youtube.com/vi/{video_id}/{suffix}"
            async with ses.head(url, allow_redirects=True) as r:
                if 200 <= r.status < 300 and r.headers.get("Content-Type", "").startswith(
                    "image/"
                ):
                    return url, True

        # 2Ô∏è‚É£ oEmbed
        if (img := await _oembed_thumb(video_id, ses)):
            buf = BufferedInputFile(img, filename=f"{video_id}.jpg")
            return buf, False

        # 3Ô∏è‚É£ –∫—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π
        url = f"https://img.youtube.com/vi/{video_id}/hqdefault.jpg"
        async with ses.get(url) as r:
            buf = BufferedInputFile(await r.read(), filename=f"{video_id}.jpg")
        return buf, False


@router.message(F.text.regexp(YOUTUBE_URL_RE))
async def handle_youtube(msg: Message):
    find_vid = await msg.answer("‚öôÔ∏è –ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ‚Ä¶")
    url = YOUTUBE_URL_RE.search(msg.text).group(0)
    video_id = YOUTUBE_URL_RE.search(msg.text).group(1)

    # 1. title
    title = None
    try:
        async with aiohttp.ClientSession(
            connector=aiohttp.TCPConnector(ssl=ssl_ctx)
        ) as ses:
            async with ses.get(
                "https://www.youtube.com/oembed",
                params={"url": url, "format": "json"},
                timeout=aiohttp.ClientTimeout(total=4),
            ) as r:
                oembed = await r.json(content_type=None)
        title = oembed["title"]
    except Exception:
        pass

    if not title:
        title = (
            await asyncio.get_running_loop().run_in_executor(
                None, lambda: _get_ytdl().extract_info(url, download=False)
            )
        ).get("title", "–í–∏–¥–µ–æ")

    # 2. thumb
    thumb_obj, _ = await best_youtube_thumb(video_id)

    # 3. best formats
    best_dict, _ = await get_best_formats(url)
    if not best_dict:
        await msg.answer("üòî –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∏–¥–µ–æ.")
        return

    kb = InlineKeyboardBuilder()

    # –∞—É–¥–∏–æ-–∫–Ω–æ–ø–∫–∞
    aud_mb = round(best_dict["aud"]["size"] / 1_048_576, 1)
    kb.row(
        InlineKeyboardButton(text=f"üéß –ê—É–¥–∏–æ ‚Ä¢ {aud_mb} MB", callback_data="dl|aud")
        )

    # 4. keyboard
    for h in sorted(k for k in best_dict if k != "aud"):
        mb = round(best_dict[h]["size"] / 1_048_576, 1)
        if mb < FILE_IO_LIMIT_MB:
            kb.row(
                InlineKeyboardButton(text=f"‚ö°Ô∏è {h}p ‚Ä¢ {mb} MB", callback_data=f"dl|{h}")
            )

    # 5. send
    await find_vid.delete()
    sent = await msg.answer_photo(
        thumb_obj,
        caption=f"<b>{title}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç ‚Üì",
        parse_mode="HTML",
        reply_markup=kb.as_markup(),
        disable_web_page_preview=True,
    )

    # 6. context
    CONTEXT[(sent.chat.id, sent.message_id)] = {
        "url": url,
        "best": best_dict,
        "orig_id": msg.message_id,
        "title": title,
    }


# ----------------------------------------------------------------------
# –û—á–µ—Ä–µ–¥—å –∏ worker
# ----------------------------------------------------------------------
BUSY_KEY = lambda cid: f"busy:{cid}"
BUSY_TTL = 7200


@router.callback_query(F.data.startswith("dl|"))
async def callback_download(call: CallbackQuery):
    key = (call.message.chat.id, call.message.message_id)
    context = CONTEXT.get(key)
    if not context:
        await call.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –∑–∞–Ω–æ–≤–æ.", show_alert=True)
        return

    token = call.data.split("|", 1)[1]  # 'aud' –∏–ª–∏ '720'
    if token == "aud":
        kind = "audio"
        fmt_info = context["best"]["aud"]
    else:
        kind = "video"
        try:
            height = int(token)
        except ValueError:
            await call.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.", show_alert=True)
            return
        if height not in context["best"]:
            await call.answer("–≠—Ç–æ –∫–∞—á–µ—Å—Ç–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.", show_alert=True)
            return
        fmt_info = context["best"][height]

    selector = fmt_info["selector"]
    url = context["url"]
    size_bytes = fmt_info["size"]

    chat_id = call.message.chat.id

    # –±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    locked = await redis_pool.set(BUSY_KEY(chat_id), 1, nx=True, ex=BUSY_TTL)
    if not locked:
        await call.answer("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∑–∞–≥—Ä—É–∑–∫–∞‚Ä¶", show_alert=True)
        return

    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º job
    job = {
        "chat_id": chat_id,
        "reply_id": context["orig_id"],
        "url": url,
        "selector": selector,
        "kind": kind,
        "height": int(token) if kind == "video" else 0,
        "title": context["title"],
        "size_bytes": size_bytes,
    }

    await redis_pool.rpush(QUEUE_KEY, json.dumps(job))
    await call.answer("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å")
    await call.message.edit_reply_markup()
    await call.message.delete()
    CONTEXT.pop(key, None)


async def process_job(job: dict):
    chat_id = job["chat_id"]
    reply_id = job["reply_id"]
    url = job["url"]
    selector = job["selector"]
    kind = job["kind"]
    height = job.get("height", 0)
    title = job["title"]
    size_mb = job["size_bytes"] / 1_048_576

    with tempfile.TemporaryDirectory() as tmp_dir:
        tmp = Path(tmp_dir)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ä–∞–∑—É, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –æ–≥—Ä–æ–º–Ω—ã–π
        if size_mb <= FILE_IO_LIMIT_MB:
            status = await bot.send_message(
                chat_id,
                f"‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞—é {'–∞—É–¥–∏–æ' if kind=='audio' else f'{height}p –≤–∏–¥–µ–æ'}‚Ä¶",
                reply_to_message_id=reply_id,
            )
            try:
                if kind == "audio":
                    file_path = await _download_audio(url, selector, tmp)
                else:
                    try:
                        file_path = await _download_video(url, selector, tmp)
                    except yt_dlp.utils.DownloadError:
                        return
                        # fallback –Ω–∞ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ (–º–µ–¥–ª–µ–Ω–Ω–µ–µ, –Ω–æ 100 % —Å–æ–≤–º–µ—Å—Ç–∏–º–æ)
                        # file_path = await _download_video_convert(url, selector, tmp)
            except Exception as e:
                print(e)
                await status.edit_text("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")
                return

            await status.edit_text("‚¨ÜÔ∏è –û—Ç–ø—Ä–∞–≤–ª—è—é‚Ä¶")
            if kind == "audio":
                await bot.send_audio(
                    chat_id,
                    FSInputFile(file_path),
                    title=title,
                    reply_to_message_id=reply_id,
                    request_timeout=7200,
                )
            else:
                w, h = get_wh(file_path)
                await bot.send_video(
                    chat_id,
                    FSInputFile(file_path),
                    width=w,
                    height=h,
                    supports_streaming=True,
                    reply_to_message_id=reply_id,
                    request_timeout=7200,
                )
            await status.delete()
        else:
            # –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª ‚Üí —Å—Å—ã–ª–∫–∞
            # jid = await enqueue_stream(url, selector, title)
            # link = f"http://45.128.99.176/dl/{jid}"
            # await bot.send_message(
            #     chat_id,
            #     f"–§–∞–π–ª –±–æ–ª—å—à–æ–π, —Å–∫–∞—á–∞–π—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n{link}",
            #     disable_web_page_preview=True,
            # )
            # return
            pass

        await bot.send_message(
            chat_id, "–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É, —á—Ç–æ–±—ã —Å–∫–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ üé•"
        )


async def handle_job(raw: str):
    job = json.loads(raw)
    chat_id = job["chat_id"]
    try:
        await process_job(job)
    finally:
        await redis_pool.delete(BUSY_KEY(chat_id))
        sem.release()


async def worker():
    while True:
        _, raw = await redis_pool.brpop(QUEUE_KEY, timeout=0)
        await sem.acquire()
        asyncio.create_task(handle_job(raw))


# ----------------------------------------------------------------------
# main
# ----------------------------------------------------------------------
async def main():
    logging.basicConfig(level=logging.INFO)
    asyncio.create_task(worker())
    await router.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
