import aiohttp, ssl, json
import asyncio
import logging
import os
import re
import tempfile
from pathlib import Path
from typing import Dict, Tuple
from aiohttp import ClientTimeout
import subprocess, pathlib
import random, threading
from typing import Optional, List
import yt_dlp
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart
from aiogram.types import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
    CallbackQuery,
    FSInputFile, BufferedInputFile,
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.client.telegram import TelegramAPIServer

TIMEOUT   = aiohttp.ClientTimeout(total=1800, sock_read=1800)   # 30‚ÄØ–º–∏–Ω –Ω–∞ upload
UA_HEADER = {"User-Agent": "curl/7.87.0"}                       # Cloudflare friendly
MAX_TRIES = 3                                                   # –ø–æ–≤—Ç–æ—Ä–æ–≤ –ø—Ä–∏ —Å–±–æ–µ
BACKOFF   = 2

# ----------------------------------------------------------------------
# CONFIG
# ----------------------------------------------------------------------
TOKEN = '7459959678:AAEpyKF35x2ivY-e1UtFcybIGyO1H6fD4sE'
LOCAL_API = TelegramAPIServer.from_base("http://127.0.0.1:8081")
session = AiohttpSession(api=LOCAL_API)

YOUTUBE_URL_RE = re.compile(
    r"https?://(?:www\.)?(?:youtube\.com/watch\?v=|youtu\.be/)([\w-]{11})"
)

# Simple in‚Äëmemory storage: (chat_id, message_id) -> {url, best}
CONTEXT: Dict[Tuple[int, int], Dict] = {}

# ----------------------------------------------------------------------
# Helpers (blocking parts run in ThreadPool via run_in_thread)
# ----------------------------------------------------------------------
async def run_in_thread(func, *args):
    loop = asyncio.get_running_loop()
    return await loop.run_in_executor(None, lambda: func(*args))

ssl_ctx = ssl.create_default_context()
ssl_ctx.check_hostname = False
ssl_ctx.verify_mode = ssl.CERT_NONE
FILE_IO_LIMIT_MB = 2000

bot = Bot(token=TOKEN, session=session, timeout=TIMEOUT)
router = Dispatcher()

FALLBACK_SERVERS: List[str] = [
    "store1", "store2", "store3", "store4", "store5",
    "store6", "store7", "store9", "srv-store8", "srv-store10"
]


async def _safe_json(resp: aiohttp.ClientResponse) -> Optional[dict]:
    try:
        return json.loads(await resp.text())
    except json.JSONDecodeError:
        return None


async def _get_server(session: aiohttp.ClientSession) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç id —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ (store1 ‚Ä¶), –¥–∞–∂–µ –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –≤—ã–∑–æ–≤ –∑–∞—Ñ–µ–π–ª–∏–ª—Å—è.
    """
    # 1) –Ω–æ–≤—ã–π —ç–Ω–¥‚Äë–ø–æ–∏–Ω—Ç /servers (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö)
    try:
        async with session.get("https://api.gofile.io/servers") as r:
            js = await _safe_json(r)
            if js and js.get("status") == "ok":
                servers = list(js["data"]["servers"].keys())
                return random.choice(servers)
    except Exception:
        pass

    # 2) —Å—Ç–∞—Ä—ã–π /getServer
    try:
        async with session.get("https://api.gofile.io/getServer") as r:
            js = await _safe_json(r)
            if js and js.get("status") == "ok":
                return js["data"]["server"]
    except Exception:
        pass

    # 3) –∑–∞–ø–∞—Å–Ω–æ–π –∂—ë—Å—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫
    return random.choice(FALLBACK_SERVERS)


async def upload_to_gofile(path: Path, tries: int = 3) -> str:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª (–¥–æ‚ÄØ10‚ÄØ–ì–ë) –Ω–∞ gofile.io, –≤–æ–∑–≤—Ä–∞—â–∞—è —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.
    """
    async with aiohttp.ClientSession(
        timeout=TIMEOUT,
        connector=aiohttp.TCPConnector(ssl=ssl_ctx, limit=4),
        headers=UA_HEADER
    ) as ses:
        backoff = 2
        for attempt in range(1, tries + 1):
            try:
                server = await _get_server(ses)

                with path.open("rb") as f:
                    form = aiohttp.FormData()
                    form.add_field("file", f, filename=path.name, content_type="video/mp4")

                    async with ses.post(f"https://{server}.gofile.io/uploadFile", data=form) as r:
                        js = await _safe_json(r)
                        if js and js.get("status") == "ok":
                            return js["data"]["downloadPage"]
                        raise RuntimeError(js.get("message", "upload failed") if js else "upload: not JSON")

            except Exception as e:
                if attempt == tries:
                    raise RuntimeError(f"Gofile upload failed: {e}") from e
                await asyncio.sleep(backoff + random.random())
                backoff *= 2


def _calc_size(fmt: dict, duration: int) -> int:
    """Approximate size in bytes or ‚àû if cannot guess."""
    if fmt.get("filesize"):
        return fmt["filesize"]
    if fmt.get("filesize_approx"):
        return fmt["filesize_approx"]
    bitrate = fmt.get("tbr") or fmt.get("abr") or 0  # kbit/s
    if bitrate and duration:
        return int(bitrate * 125 * duration)
    return float("inf")


# 1. –û–¥–∏–Ω‚Äë–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä YoutubeDL –Ω–∞ –≤—Å—ë –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
_YDL_LOCK = threading.Lock()
_YDL: yt_dlp.YoutubeDL | None = None

def _get_ytdl() -> yt_dlp.YoutubeDL:
    global _YDL
    with _YDL_LOCK:
        if _YDL is None:
            _YDL = yt_dlp.YoutubeDL({
                "skip_download": True,
                "quiet": True,
                "no_warnings": True,

                # –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –ø–æ—Ç–æ–∫–∏ –ø—Ä—è–º–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:
                #  ‚Ä¢ DASH‚Äë–≤–∏–¥–µ–æ MP4/H.264 + –ª—É—á—à—É—é M4A‚Äë–∞—É–¥–∏–æ
                #  ‚Ä¢ –µ—Å–ª–∏ DASH –Ω–µ—Ç, —Ç–æ –ª—É—á—à–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤ MP4/H.264
                "format": ("bv*[vcodec^=avc1][ext=mp4]+ba[ext=m4a]"
                           "/best[ext=mp4][vcodec^=avc1]"),

                # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º DASH‚Äë –∏ HLS‚Äë–º–∞–Ω–∏—Ñ–µ—Å—Ç, —Å—Ä–∞–∑—É Android‚Äë–∫–ª–∏–µ–Ω—Ç
                "extractor_args": {
                    "youtube": ["skip=dash,hls", "player_client=android"]
                },

                "forcejson": True,   # —Ç–æ–ª—å–∫–æ JSON, –Ω–∏–∫–∞–∫–æ–π –ø–æ–ø—ã—Ç–∫–∏ –∫–∞—á–∞—Ç—å
                "simulate": True,
            })
        return _YDL


def _best_formats(url: str):
    ydl = _get_ytdl()
    info = ydl.extract_info(url, download=False)

    duration = info.get("duration", 0) or 0
    best = {}

    # ‚Äî –Ω–∞–π–¥—ë–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä AAC/M4A –∞—É–¥–∏–æ (–¥–ª—è DASH‚Äë–≤–∏–¥–µ–æ) ‚Äî
    audio_min = min(
        (
            fmt.get("filesize")
            or fmt.get("filesize_approx")
            or int((fmt.get("abr") or 0) * 125 * duration)        # abr¬†kbit/s ‚ûú¬†bytes
            for fmt in info["formats"]
            if fmt.get("vcodec") == "none" and fmt.get("ext") == "m4a"
        ),
        default=0,
    )

    # ‚Äî –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ MP4/H.264 –≤–∏–¥–µ–æ‚Äë–ø–æ—Ç–æ–∫–∏ ‚Äî
    for fmt in info["formats"]:
        if fmt.get("ext") != "mp4":
            continue
        vcodec = fmt.get("vcodec") or ""
        if not vcodec.startswith("avc") or vcodec == "none":
            continue

        h = fmt.get("height") or 0
        if not h:
            continue

        size = (
            fmt.get("filesize")
            or fmt.get("filesize_approx")
            or int((fmt.get("tbr") or 0) * 125 * duration)        # tbr¬†kbit/s ‚ûú¬†bytes
        )

        selector = fmt["format_id"]
        if fmt.get("acodec") == "none":          # DASH‚Äë–≤–∏–¥–µ–æ –±–µ–∑ –∑–≤—É–∫–∞
            size += audio_min                    # ‚Üê –ø—Ä–∏–±–∞–≤–ª—è–µ–º –≤–µ—Å –∞—É–¥–∏–æ
            selector += "+bestaudio"

        if h not in best or size < best[h]["size"]:
            best[h] = {"selector": selector, "size": size}

    return best, duration


async def get_best_formats(url: str):
    return await run_in_thread(_best_formats, url)


async def _download_video(url: str, selector: str, tmp_dir: Path) -> Path:
    """Download via yt‚Äëdlp in thread; return file path."""

    def _dl():
        ydl_opts = {
            "format": selector,
            "outtmpl": str(tmp_dir / "%(_id)s_%(height)sp.mp4"),
            # ensure container mp4 after merge/recode if needed
            "merge_output_format": "mp4",
            "postprocessors": [
                {
                    "key": "FFmpegVideoConvertor",
                    "preferedformat": "mp4",
                }
            ],
        }
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            return Path(ydl.prepare_filename(info))

    return await run_in_thread(_dl)

def get_wh(path: pathlib.Path) -> tuple[int, int]:
    """–í–µ—Ä–Ω—ë—Ç (width, height) –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫–∞."""
    meta = subprocess.check_output([
        "ffprobe", "-v", "quiet", "-print_format", "json",
        "-select_streams", "v:0", "-show_entries", "stream=width,height",
        str(path)
    ])
    w, h = json.loads(meta)["streams"][0].values()
    return int(w), int(h)

# ----------------------------------------------------------------------
# Bot handlers
# ----------------------------------------------------------------------

@router.message(CommandStart())
async def cmd_start(msg: Message):
    await msg.answer(
        "–ü—Ä–∏–≤–µ—Ç! üôÉ –ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube‚Äë–≤–∏–¥–µ–æ"
    )

async def _oembed_thumb(video_id: str, ses: aiohttp.ClientSession) -> bytes | None:
    """–ë–µ—Ä—ë–º thumbnail_url –∏–∑ oEmbed, –µ—Å–ª–∏ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ jpg –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."""
    api = (
        "https://www.youtube.com/oembed"
        f"?url=https://youtu.be/{video_id}&format=json"
    )
    async with ses.get(api) as r:
        if r.status != 200:
            return None
        thumb_url = (await r.json(content_type=None)).get("thumbnail_url")
    async with ses.get(thumb_url) as r:
        if r.status == 200 and r.headers.get("Content-Type", "").startswith("image/"):
            return await r.read()
    return None

_VARIANTS = ["maxresdefault.jpg", "hqdefault.jpg", "mqdefault.jpg", "sddefault.jpg"]

async def best_youtube_thumb(video_id: str):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–æ–±—ä–µ–∫—Ç_–∏–ª–∏_URL, is_url: bool)."""
    async with aiohttp.ClientSession(
        connector=aiohttp.TCPConnector(ssl=ssl_ctx), timeout=TIMEOUT
    ) as ses:

        # 1Ô∏è‚É£ –ø—ã—Ç–∞–µ–º—Å—è –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ jpg (–ø—Ä–∏–Ω–∏–º–∞–µ–º 200‚Äë299)
        for suffix in _VARIANTS:
            url = f"https://img.youtube.com/vi/{video_id}/{suffix}"
            async with ses.head(url, allow_redirects=True) as r:
                if 200 <= r.status < 300 and r.headers.get("Content-Type", "").startswith("image/"):
                    return url, True          # Telegram —É–º–µ–µ—Ç URL

        # 2Ô∏è‚É£ fallback: oEmbed‚Äëthumbnail (webp/jpg)
        if (img := await _oembed_thumb(video_id, ses)):
            buf = BufferedInputFile(img, filename=f"{video_id}.jpg")
            return buf, False                # Telegram –ø–æ–ª—É—á–∏—Ç —Ñ–∞–π–ª

        # 3Ô∏è‚É£ –∫—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π ‚Äî –ø—Ä–æ–±—É–µ–º –≤—Å—ë‚Äë—Ç–∞–∫–∏ hqdefault.jpg GET‚Äë–æ–º
        url = f"https://img.youtube.com/vi/{video_id}/hqdefault.jpg"
        async with ses.get(url) as r:
            buf = BufferedInputFile(await r.read(), filename=f"{video_id}.jpg")
        return buf, False

@router.message(F.text.regexp(YOUTUBE_URL_RE))
async def handle_youtube(msg: Message):
    find_vid = await msg.answer("‚öôÔ∏è –ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ‚Ä¶")
    url = YOUTUBE_URL_RE.search(msg.text).group(0)
    video_id = YOUTUBE_URL_RE.search(msg.text).group(1)

    # ‚îÄ‚îÄ 1. title + preview (oEmbed ‚Üí fallback yt‚Äëdlp) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    title, thumb_obj = None, None
    try:
        async with aiohttp.ClientSession(
                connector=aiohttp.TCPConnector(ssl=ssl_ctx)) as ses:
            async with ses.get(
                    "https://www.youtube.com/oembed",
                    params={"url": url, "format": "json"},
                    timeout=aiohttp.ClientTimeout(total=4)
            ) as r:
                oembed = await r.json(content_type=None)   # –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º MIME
        title = oembed["title"]
    except Exception:
        pass                                            # oEmbed –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª

    if not title:
        info = await run_in_thread(lambda: _get_ytdl().extract_info(url, download=False))
        title = info.get("title", "–í–∏–¥–µ–æ")

    # ‚Äî –∫–∞—Ä—Ç–∏–Ω–∫–∞ (–ø—Ä–æ–≤–µ—Ä—è–µ–º maxres‚Üíhq‚Üímq) ‚Äî
    thumb_obj, _ = await best_youtube_thumb(video_id)

    # ‚îÄ‚îÄ 2. MP4‚Äë—Ñ–æ—Ä–º–∞—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ ‚Äî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    best_dict, _ = await get_best_formats(url)
    if not best_dict:
        await msg.answer("üòî‚ÄØ–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ MP4‚Äë–≤–µ—Ä—Å–∏–∏ —ç—Ç–æ–≥–æ —Ä–æ–ª–∏–∫–∞.")
        return

    # ‚îÄ‚îÄ 3. –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ‚Äî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    kb = InlineKeyboardBuilder()
    for h in sorted(best_dict):
        mb = round(best_dict[h]["size"] / 1_048_576, 1)
        kb.row(InlineKeyboardButton(text=f"‚ö°Ô∏è {h}p ‚Ä¢ {mb}‚ÄØMB", callback_data=f"dl|{h}"))

    # ‚îÄ‚îÄ 4. –µ–¥–∏–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    await find_vid.delete()
    sent = await msg.answer_photo(
        thumb_obj,
        caption=f"<b>{title}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ ‚Üì",
        parse_mode="HTML",
        reply_markup=kb.as_markup(),
        disable_web_page_preview=True,
    )

    # ‚îÄ‚îÄ 5. —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç ‚Äî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    CONTEXT[(sent.chat.id, sent.message_id)] = {"url": url, "best": best_dict}

@router.callback_query(F.data.startswith("dl|"))
async def callback_download(call: CallbackQuery):
    key = (call.message.chat.id, call.message.message_id)
    context = CONTEXT.get(key)
    if not context:
        await call.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –∑–∞–Ω–æ–≤–æ.", show_alert=True)
        return

    height = int(call.data.split("|", 1)[1])
    if height not in context["best"]:
        await call.answer("–≠—Ç–æ –∫–∞—á–µ—Å—Ç–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.", show_alert=True)
        return

    selector = context["best"][height]["selector"]
    url = context["url"]

    # –≤—Å–ø–ª—ã–≤–∞—é—â–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞‚Äëtoast –∏ –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
    await call.answer(f"–°–∫–∞—á–∏–≤–∞—é {height}p –≤–∏–¥–µ–æ‚Ä¶")

    # —É–¥–∞–ª—è–µ–º inline‚Äë–∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–∂–∏–º–∞–ª –ø–æ–≤—Ç–æ—Ä–Ω–æ
    await call.message.edit_reply_markup()
    await call.message.delete()

    status_msg = await call.message.answer(f"‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞—é {height}p –≤–∏–¥–µ–æ‚Ä¶ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ‚Ä¶")

    with tempfile.TemporaryDirectory() as tmp:
        tmp_dir = Path(tmp)
        try:
            file_path = await _download_video(url, selector, tmp_dir)
        except Exception as e:
            await status_msg.edit_text(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")
            return
        await status_msg.edit_text(f"‚¨áÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ Telegram")
        size_mb = file_path.stat().st_size / 1_048_576
        if size_mb <= FILE_IO_LIMIT_MB:
            # ‚Äî 2A. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç (Telegram-–ø–ª–µ–µ—Ä –ø—Ä–∏ ‚â§50¬†–ú–ë –Ω–µ –Ω—É–∂–µ–Ω)
            w, h = get_wh(file_path)
            logging.getLogger("aiogram.client").setLevel(logging.DEBUG)
            await call.message.answer_video(
                FSInputFile(file_path),
                request_timeout=1800,
                width=w,
                height=h,
                supports_streaming=True
            )
            await status_msg.delete()
        else:
            # ‚Äî 2B. –ö—Ä—É–ø–Ω—ã–π —Ñ–∞–π–ª: –≤—ã–≥—Ä—É–∂–∞–µ–º –Ω–∞ file.io –∏ –¥–∞—ë–º —Å—Å—ã–ª–∫—É
            try:
                link = await upload_to_gofile(file_path)
            except Exception as e:
                await status_msg.edit_text(f"file.io: {e}")
                return
            await status_msg.delete()
            await call.message.answer(
                f"üìé –§–∞–π–ª –ø—Ä–µ–≤—ã—à–∞–µ—Ç {FILE_IO_LIMIT_MB//1000}‚ÄØGb.\n"
                f"–°–∫–∞—á–∞–π—Ç–µ –µ–≥–æ –ø–æ —Å—Å—ã–ª–∫–µ:\n{link}"
            )
        await call.message.answer('–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–∫–∞—á–∞—Ç—å –µ—â–µ –æ–¥–Ω–æ –≤–∏–¥–µ–æ, –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏—Ç–µ –Ω–∞ –Ω–µ–≥–æ —Å—Å—ã–ª–∫—É üíã')
    CONTEXT.pop(key, None)


async def main():
    logging.basicConfig(level=logging.INFO)
    await router.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())